// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pg from "pg";
import * as Hono from "hono";
import * as Payer from "../domain/Payer.res.mjs";
import * as Invoice from "../domain/Invoice.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Identifiers from "../domain/Identifiers.res.mjs";
import * as Core from "@equinox-js/core";
import * as NodeServer from "@hono/node-server";
import * as MessageDb from "@equinox-js/message-db";

var hono = new Hono.Hono();

var pools = [];

function endPools() {
  var promises = [];
  var aux = function (_i) {
    while(true) {
      var i = _i;
      if (i >= pools.length) {
        return ;
      }
      var pool = Caml_array.get(pools, i);
      promises.push(pool.end());
      _i = i + 1 | 0;
      continue ;
    };
  };
  aux(0);
  return Js_promise.then_((function (param) {
                return Promise.resolve();
              }), Promise.all(promises));
}

function createPool(connectionString, max) {
  var pool = new (Pg.default.Pool)({
        connectionString: connectionString,
        max: max
      });
  pools.push(pool);
  return pool;
}

function getEnv(key) {
  return process.env[key];
}

function getEnvSafe(key) {
  return Js_dict.get(process.env, key);
}

var leaderPool = createPool(process.env["MDB_CONN_STR"], 10);

var connStr = Js_dict.get(process.env, "MDB_RO_CONN_STR");

var followerPool = connStr !== undefined ? Caml_option.some(createPool(connStr, 10)) : undefined;

var cache = new Core.MemoryCache();

var context = MessageDb.MessageDbContext.create({
      leaderPool: leaderPool,
      followerPool: followerPool,
      batchSize: 500
    });

var config = [
  context,
  cache
];

var payerService = Payer.Config.create(config);

var invoiceService = Invoice.Config.create(config);

hono.get("/payer/:id", (async function (ctx) {
        var params = ctx.req.param();
        var id = Belt_Option.getExn(Belt_Option.map(Js_dict.get(params, "id"), (function (prim) {
                    return prim;
                  })));
        var payer = await Payer.Service.readProfile(payerService, id);
        return ctx.json(payer);
      }));

hono.put("/payer/:id", (async function (ctx) {
        var body = await ctx.req.json();
        var body$1 = Belt_Result.getExn(Payer.$$Event.payer_profile_decode(body));
        var params = ctx.req.param();
        var id = Belt_Option.getExn(Belt_Option.map(Js_dict.get(params, "id"), (function (prim) {
                    return prim;
                  })));
        await Payer.Service.updateProfile(payerService, id, body$1);
        return ctx.json(null);
      }));

hono.delete("/payer/:id", (async function (ctx) {
        var params = ctx.req.param();
        var id = Belt_Option.getExn(Belt_Option.map(Js_dict.get(params, "id"), (function (prim) {
                    return prim;
                  })));
        await Payer.Service.deletePayer(payerService, id);
        return ctx.json(null);
      }));

hono.post("/invoice", (async function (ctx) {
        var id = Identifiers.InvoiceId.create();
        var body = await ctx.req.json();
        await Invoice.Service.raise(invoiceService, id, body);
        return ctx.json({
                    id: id
                  });
      }));

hono.get("/invoice/:id", (async function (ctx) {
        var params = ctx.req.param();
        var id = Belt_Option.getExn(Belt_Option.map(Js_dict.get(params, "id"), (function (prim) {
                    return prim;
                  })));
        var invoice = await Invoice.Service.readInvoice(invoiceService, id);
        if (invoice !== undefined) {
          return ctx.json(invoice);
        } else {
          ctx.status(404);
          return ctx.json("Not found");
        }
      }));

NodeServer.serve({
      port: 3000,
      fetch: hono.fetch
    });

export {
  hono ,
  pools ,
  endPools ,
  createPool ,
  getEnv ,
  getEnvSafe ,
  leaderPool ,
  followerPool ,
  cache ,
  context ,
  config ,
  payerService ,
  invoiceService ,
}
/* hono Not a pure module */
