// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/lib/es6/src/Decco.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Equinox__Codec from "@equinox-js/rescript/lib/es6/src/Equinox__Codec.res.mjs";
import * as Core from "@equinox-js/core";
import * as Equinox__StreamId from "@equinox-js/rescript/lib/es6/src/Equinox__StreamId.res.mjs";
import * as Equinox__StreamName from "@equinox-js/rescript/lib/es6/src/Equinox__StreamName.res.mjs";
import * as MessageDb from "@equinox-js/message-db";

var category = "Payer";

var streamId = Equinox__StreamId.gen(function (prim) {
      return prim;
    });

var decodeId = Equinox__StreamId.dec(function (prim) {
      return prim;
    });

var tryMatch = Equinox__StreamName.tryMatch(category, decodeId);

function name(id) {
  return Equinox__StreamName.create(category, streamId(id));
}

var Stream = {
  category: category,
  streamId: streamId,
  decodeId: decodeId,
  tryMatch: tryMatch,
  name: name
};

function payer_profile_encode(value) {
  return Js_dict.fromArray([
              [
                "name",
                Decco.stringToJson(value.name)
              ],
              [
                "email",
                Decco.stringToJson(value.email)
              ]
            ]);
}

function payer_profile_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var name = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
  if (name.TAG === "Ok") {
    var email = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
    if (email.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Decco.unsafeAddFieldToObject("name", name._0, Decco.unsafeAddFieldToObject("email", email._0, {}))
            };
    }
    var e = email._0;
    return {
            TAG: "Error",
            _0: {
              path: ".email" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = name._0;
  return {
          TAG: "Error",
          _0: {
            path: ".name" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function t_encode(value) {
  if (typeof value !== "object") {
    return ["PayerDeleted"];
  } else {
    return [
            "PayerProfileUpdated",
            payer_profile_encode(value._0)
          ];
  }
}

function t_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "PayerDeleted" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "PayerDeleted"
                  };
          }
      case "PayerProfileUpdated" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = payer_profile_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "PayerProfileUpdated",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function encode(x, param) {
  if (typeof x !== "object") {
    return [
            "PayerDeleted",
            undefined
          ];
  } else {
    return [
            "PayerProfileUpdated",
            JSON.stringify(x._0)
          ];
  }
}

function tryDecode(x) {
  switch (x[0]) {
    case "PayerDeleted" :
        return "PayerDeleted";
    case "PayerProfileUpdated" :
        var data = x[1];
        if (data !== undefined) {
          return {
                  TAG: "PayerProfileUpdated",
                  _0: JSON.parse(data)
                };
        } else {
          return ;
        }
    default:
      return ;
  }
}

var codec = Equinox__Codec.json(encode, tryDecode);

var $$Event = {
  payer_profile_encode: payer_profile_encode,
  payer_profile_decode: payer_profile_decode,
  t_encode: t_encode,
  t_decode: t_decode,
  encode: encode,
  tryDecode: tryDecode,
  codec: codec
};

function evolve(_state, $$event) {
  if (typeof $$event !== "object") {
    return ;
  } else {
    return $$event._0;
  }
}

function fold(state, events) {
  return Belt_Array.reduce(events, state, evolve);
}

var Fold = {
  initial: undefined,
  evolve: evolve,
  fold: fold
};

function updateProfile(data) {
  return function (state) {
    if (Caml_obj.equal(state, data)) {
      return [];
    } else {
      return [{
                TAG: "PayerProfileUpdated",
                _0: data
              }];
    }
  };
}

function deletePayer(state) {
  if (state === undefined) {
    return [];
  } else {
    return ["PayerDeleted"];
  }
}

var Decide = {
  updateProfile: updateProfile,
  deletePayer: deletePayer
};

function updateProfile$1(service, id, profile) {
  var decider = service.resolve(id);
  return decider.transact(updateProfile(profile));
}

function deletePayer$1(service, id) {
  var decider = service.resolve(id);
  return decider.transact(deletePayer);
}

function readProfile(service, id) {
  var decider = service.resolve(id);
  return decider.query(function (state) {
              return state;
            });
}

var Service = {
  updateProfile: updateProfile$1,
  deletePayer: deletePayer$1,
  readProfile: readProfile
};

function resolveCategory(param) {
  return MessageDb.MessageDbCategory.create(param[0], category, codec, fold, undefined, Core.CachingStrategy.Cache(param[1]), MessageDb.AccessStrategy.LatestKnownEvent());
}

function create(config) {
  var category = resolveCategory(config);
  var resolve = function (id) {
    return Core.Decider.forStream(category, streamId(id));
  };
  return {
          resolve: resolve
        };
}

var Config = {
  resolveCategory: resolveCategory,
  create: create
};

export {
  Stream ,
  $$Event ,
  Fold ,
  Decide ,
  Service ,
  Config ,
}
/* streamId Not a pure module */
