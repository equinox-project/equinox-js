"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[569],{7522:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(9901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),i=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=i(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=i(n),y=r,m=p["".concat(d,".").concat(y)]||p[y]||u[y]||c;return n?a.createElement(m,o(o({ref:t},l),{},{components:n})):a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=y;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<c;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>i});var a=n(7364),r=(n(9901),n(7522));const c={},o="Hotel",s={unversionedId:"examples/hotel",id:"examples/hotel",title:"Hotel",description:"Note",source:"@site/docs/examples/hotel.md",sourceDirName:"examples",slug:"/examples/hotel",permalink:"/equinox-js/docs/examples/hotel",draft:!1,editUrl:"https://github.com/nordfjord/equinox-js/tree/main/apps/docs/docs/examples/hotel.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Contact preferences",permalink:"/equinox-js/docs/examples/contact-preferences"},next:{title:"Invoice",permalink:"/equinox-js/docs/examples/invoice"}},d={},i=[],l={toc:i},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hotel"},"Hotel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { ChargeId, GuestStayId, PaymentId } from "./types"\nimport { Decider, ICachingStrategy, ICodec } from "@equinox-js/core"\nimport * as Mdb from "@equinox-js/message-db"\nimport * as Mem from "@equinox-js/memory-store"\n\nexport const Category = "GuestStay"\n\nconst streamId = (guestStayId: GuestStayId) => guestStayId as string\n\ntype Event =\n/** Notes time of checkin of the guest (does not affect whether charges can be levied against the stay) */\n  | { type: "CheckedIn"; data: { at: Date } }\n  /** Notes addition of a charge against the stay */\n  | { type: "Charged"; data: { chargeId: ChargeId; at: Date; amount: number } }\n  /** Notes a payment against this stay */\n  | { type: "Paid"; data: { paymentId: PaymentId; at: Date; amount: number } }\n  /** Notes an ordinary checkout by the Guest (requires prior payment of all outstanding charges) */\n  | { type: "CheckedOut"; data: { at: Date } }\n\nconst codec: ICodec<Event, string> = {\n  tryDecode(ev): Event | undefined {\n    const data = JSON.parse(ev.data || "{}")\n    switch (ev.type) {\n      case "CheckedIn":\n        return { type: ev.type, data: { at: new Date(data.at) } }\n      case "CheckedOut":\n        return { type: ev.type, data: { at: new Date(data.at) } }\n      case "Charged":\n        return {\n          type: ev.type,\n          data: { chargeId: data.chargeId, amount: data.amount, at: new Date(data.at) },\n        }\n      case "Paid":\n        return {\n          type: ev.type,\n          data: { paymentId: data.paymentId, amount: data.amount, at: new Date(data.at) },\n        }\n    }\n  },\n  encode(ev) {\n    return { type: ev.type, data: JSON.stringify(ev.data) }\n  },\n}\n\ntype Balance = {\n  balance: number\n  charges: Set<ChargeId>\n  payments: Set<PaymentId>\n  checkedInAt?: Date\n}\ntype State = { type: "Active"; balance: Balance } | { type: "Closed" }\nconst initial: State = {\n  type: "Active",\n  balance: { balance: 0, charges: new Set(), payments: new Set() },\n}\n\nfunction evolve(state: State, event: Event): State {\n  switch (state.type) {\n    case "Active":\n      switch (event.type) {\n        case "CheckedIn":\n          return { type: "Active", balance: { ...state.balance, checkedInAt: event.data.at } }\n        case "Charged":\n          return {\n            type: "Active",\n            balance: {\n              ...state.balance,\n              charges: new Set([...state.balance.charges, event.data.chargeId]),\n              balance: state.balance.balance + event.data.amount,\n            },\n          }\n        case "Paid":\n          return {\n            type: "Active",\n            balance: {\n              ...state.balance,\n              payments: new Set([...state.balance.payments, event.data.paymentId]),\n              balance: state.balance.balance - event.data.amount,\n            },\n          }\n        case "CheckedOut":\n          return { type: "Closed" }\n      }\n      break\n    case "Closed":\n      throw new Error("No events allowed after CheckedOut")\n  }\n}\n\nconst fold = (state: State, events: Event[]) => events.reduce(evolve, state)\n\nconst checkIn =\n  (at: Date) =>\n    (state: State): Event[] => {\n      if (state.type === "Closed") throw new Error("Invalid checkin")\n      if (!state.balance.checkedInAt) return [{ type: "CheckedIn", data: { at } }]\n      if (+state.balance.checkedInAt === +at) return []\n      throw new Error("Invalid checkin")\n    }\n\nconst charge =\n  (at: Date, chargeId: ChargeId, amount: number) =>\n    (state: State): Event[] => {\n      if (state.type === "Closed") throw new Error("Cannot record charge for Closed account")\n      if (state.balance.charges.has(chargeId)) return []\n      return [{ type: "Charged", data: { chargeId, amount, at } }]\n    }\n\nconst pay =\n  (at: Date, paymentId: PaymentId, amount: number) =>\n    (state: State): Event[] => {\n      if (state.type === "Closed") throw new Error("Cannot record payment for not opened account")\n      if (state.balance.payments.has(paymentId)) return []\n      return [{ type: "Paid", data: { paymentId, amount, at } }]\n    }\n\ntype CheckoutResult =\n  | { type: "OK" }\n  | { type: "AlreadyCheckedOut" }\n  | { type: "BalanceOutstanding"; amount: number }\nconst checkOut =\n  (at: Date) =>\n    (state: State): [CheckoutResult, Event[]] => {\n      if (state.type === "Closed") return [{ type: "AlreadyCheckedOut" }, []]\n      if (state.balance.balance > 0)\n        return [{ type: "BalanceOutstanding", amount: state.balance.balance }, []]\n      return [{ type: "OK" }, [{ type: "CheckedOut", data: { at } }]]\n    }\n\nexport class Service {\n  constructor(private readonly resolve: (stayId: GuestStayId) => Decider<Event, State>) {}\n  charge(stayId: GuestStayId, chargeId: ChargeId, amount: number) {\n    const decider = this.resolve(stayId)\n    return decider.transact(charge(new Date(), chargeId, amount))\n  }\n\n  pay(stayId: GuestStayId, paymentId: PaymentId, amount: number) {\n    const decider = this.resolve(stayId)\n    return decider.transact(pay(new Date(), paymentId, amount))\n  }\n\n  checkIn(stayId: GuestStayId) {\n    const decider = this.resolve(stayId)\n    return decider.transact(checkIn(new Date()))\n  }\n\n  checkOut(stayId: GuestStayId) {\n    const decider = this.resolve(stayId)\n    return decider.transactResult(checkOut(new Date()))\n  }\n\n  static createMessageDb(context: Mdb.MessageDbContext, caching: ICachingStrategy) {\n    const category = Mdb.MessageDbCategory.create(context, codec, fold, initial, caching)\n    const resolve = (stayId: GuestStayId) =>\n      Decider.resolve(category, Category, streamId(stayId), null)\n    return new Service(resolve)\n  }\n\n  static createMem(store: Mem.VolatileStore<string>) {\n    const category = Mem.MemoryStoreCategory.create(store, codec, fold, initial)\n    const resolve = (stayId: GuestStayId) =>\n      Decider.resolve(category, Category, streamId(stayId), null)\n    return new Service(resolve)\n  }\n}\n')),(0,r.kt)("p",null,"Note: this example is using branded strings for identifiers. the ",(0,r.kt)("inlineCode",{parentName:"p"},"./types.ts")," file might look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'type Branded<T extends string> = string & { __brand: T }\nexport type GuestStayId = Branded<"GuestStayId">\nexport type ChargeId = Branded<"ChargeId">\nexport type PaymentId = Branded<"PaymentId">\n')),(0,r.kt)("p",null,"This is quite a handy trick as it can prevent a whole class of errors from ever appearing."))}u.isMDXComponent=!0}}]);