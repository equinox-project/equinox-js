"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95],{7522:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(9901);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},l="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=d(t),u=a,m=l["".concat(s,".").concat(u)]||l[u]||v[u]||i;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>v,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(7364),a=(t(9901),t(7522));const i={},o="Invoice",c={unversionedId:"examples/invoice",id:"examples/invoice",title:"Invoice",description:"",source:"@site/docs/examples/invoice.md",sourceDirName:"examples",slug:"/examples/invoice",permalink:"/equinox-js/docs/examples/invoice",draft:!1,editUrl:"https://github.com/nordfjord/equinox-js/tree/main/apps/docs/docs/examples/invoice.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hotel",permalink:"/equinox-js/docs/examples/hotel"},next:{title:"Reactions",permalink:"/equinox-js/docs/reactions/"}},s={},d=[],p={toc:d},l="wrapper";function v(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"invoice"},"Invoice"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { PayerId, InvoiceId } from "./types"\nimport * as Mdb from "@equinox-js/message-db"\nimport * as Mem from "@equinox-js/memory-store"\nimport z from "zod"\nimport { Codec, Decider, ICachingStrategy, StreamId } from "@equinox-js/core"\n\nexport const Category = "Invoice"\nexport const streamId = StreamId.gen(InvoiceId.toString)\n\nconst RaisedSchema = z.object({\n  payer_id: z.string().uuid().transform(PayerId.parse),\n  amount: z.number(),\n})\nconst PaymentSchema = z.object({\n  reference: z.string(),\n  amount: z.number(),\n})\n\ntype InvoiceRaised = z.infer<typeof RaisedSchema>\ntype Payment = z.infer<typeof PaymentSchema>\n\ntype Event =\n  | { type: "InvoiceRaised"; data: InvoiceRaised }\n  | { type: "PaymentReceived"; data: Payment }\n  | { type: "InvoiceFinalized" }\n\nconst codec = Codec.zod<Event>({\n  InvoiceRaised: RaisedSchema.parse,\n  PaymentReceived: PaymentSchema.parse,\n  InvoiceFinalized: () => undefined,\n})\n\nexport type InvoiceState = {\n  amount: number\n  payer_id: PayerId\n  payments: Set<string>\n  amount_paid: number\n}\nexport type State =\n  | { type: "Initial" }\n  | { type: "Raised"; state: InvoiceState }\n  | { type: "Finalized"; state: InvoiceState }\nexport const initial: State = { type: "Initial" }\n\nfunction evolveInitial(event: Event): State {\n  if (event.type !== "InvoiceRaised") throw new Error("Unexpected " + event.type)\n  return {\n    type: "Raised",\n    state: {\n      amount: event.data.amount,\n      payer_id: event.data.payer_id,\n      amount_paid: 0,\n      payments: new Set(),\n    },\n  }\n}\n\nfunction evolveRaised(state: InvoiceState, event: Event): State {\n  switch (event.type) {\n    case "InvoiceRaised":\n      throw new Error("Unexpected " + event.type)\n    case "PaymentReceived":\n      return {\n        type: "Raised",\n        state: {\n          ...state,\n          payments: new Set([...state.payments, event.data.reference]),\n          amount_paid: state.amount_paid + event.data.amount,\n        },\n      }\n\n    case "InvoiceFinalized":\n      return { type: "Finalized", state }\n  }\n}\n\nfunction evolveFinalized(event: Event): State {\n  throw new Error("Unexpected " + event.type)\n}\n\nexport function evolve(state: State, event: Event): State {\n  switch (state.type) {\n    case "Initial":\n      return evolveInitial(event)\n    case "Raised":\n      return evolveRaised(state.state, event)\n    case "Finalized":\n      return evolveFinalized(event)\n  }\n}\n\nexport function fold(state: State, events: Event[]): State {\n  return events.reduce(evolve, state)\n}\n\nexport const raiseInvoice =\n  (data: InvoiceRaised) =>\n  (state: State): Event[] => {\n    switch (state.type) {\n      case "Initial":\n        return [{ type: "InvoiceRaised", data }]\n      case "Raised":\n        if (state.state.amount === data.amount && state.state.payer_id === data.payer_id) return []\n        throw new Error("Invoice is already raised")\n      case "Finalized":\n        throw new Error("invoice is finalized")\n    }\n  }\n\nexport const recordPayment =\n  (data: Payment) =>\n  (state: State): Event[] => {\n    switch (state.type) {\n      case "Initial":\n        throw new Error("Invoice not found")\n      case "Finalized":\n        throw new Error("Invoice is finalized")\n      case "Raised":\n        if (state.state.payments.has(data.reference)) return []\n        return [{ type: "PaymentReceived", data }]\n    }\n  }\n\nexport const finalize = (state: State): Event[] => {\n  switch (state.type) {\n    case "Initial":\n      throw new Error("Invoice not found")\n    case "Finalized":\n      return []\n    case "Raised":\n      return [{ type: "InvoiceFinalized" }]\n  }\n}\n\nexport const summaryQuery = (state: State) => {\n  switch (state.type) {\n    case "Initial":\n      return null\n    case "Raised":\n    case "Finalized":\n      return {\n        amount: state.state.amount,\n        payer_id: state.state.payer_id.toString(),\n        finalized: state.type === "Finalized",\n      }\n  }\n}\n\nexport class Service {\n  constructor(private readonly resolve: (invoiceId: InvoiceId) => Decider<Event, State>) {}\n\n  raise(id: InvoiceId, data: InvoiceRaised) {\n    const decider = this.resolve(id)\n    return decider.transact(raiseInvoice(data))\n  }\n\n  recordPayment(id: InvoiceId, data: Payment) {\n    const decider = this.resolve(id)\n    return decider.transact(recordPayment(data))\n  }\n\n  finalize(id: InvoiceId) {\n    const decider = this.resolve(id)\n    return decider.transact(finalize)\n  }\n\n  readInvoice(id: InvoiceId) {\n    const decider = this.resolve(id)\n    return decider.query(summaryQuery)\n  }\n\n  static createMessageDb(context: Mdb.MessageDbContext, caching: ICachingStrategy) {\n    const category = Mdb.MessageDbCategory.create(context, Category, codec, fold, initial, caching)\n    const resolve = (invoiceId: InvoiceId) =>\n      Decider.resolve(category, streamId(invoiceId), null)\n    return new Service(resolve)\n  }\n\n  static createMem(store: Mem.VolatileStore<string>) {\n    const category = Mem.MemoryStoreCategory.create(store, Category, codec, fold, initial)\n    const resolve = (invoiceId: InvoiceId) =>\n      Decider.resolve(category, streamId(invoiceId), null)\n    return new Service(resolve)\n  }\n}\n')))}v.isMDXComponent=!0}}]);