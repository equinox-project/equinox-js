"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[591],{7522:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,y=p["".concat(i,".").concat(m)]||p[m]||l[m]||o;return n?r.createElement(y,c(c({ref:t},d),{},{components:n})):r.createElement(y,c({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,c[1]=s;for(var u=2;u<o;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7364),a=(n(9901),n(7522));const o={},c="Bank Account",s={unversionedId:"examples/bank-account",id:"examples/bank-account",title:"Bank Account",description:"",source:"@site/docs/examples/bank-account.md",sourceDirName:"examples",slug:"/examples/bank-account",permalink:"/equinox-js/docs/examples/bank-account",draft:!1,editUrl:"https://github.com/nordfjord/equinox-js/tree/main/apps/docs/docs/examples/bank-account.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Identifiers",permalink:"/equinox-js/docs/core-concepts/identifiers"},next:{title:"Contact preferences",permalink:"/equinox-js/docs/examples/contact-preferences"}},i={},u=[],d={toc:u},p="wrapper";function l(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bank-account"},"Bank Account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Mdb from \"@equinox-js/message-db\"\nimport * as Mem from \"@equinox-js/memory-store\"\n\nexport const Category = \"Account\"\n\nexport type Event =\n  | { type: 'Deposited', data: { amount: number } }\n  | { type: 'Withdrawn', data: { amount: number } }\nexport type State = number\nexport const initial: State = 0\nexport const evolve = (state: State, event: Event): State => {\n  switch (event.type) {\n    case \"Deposited\":\n      return state + event.data.amount\n    case \"Withdrawn\":\n      return state - event.data.amount\n  }\n}\nexport const fold = (state: State, events: Event[]) => events.reduce(evolve, state)\n\n// Don't be frightened by the use of a namespace here. They're a honkin' great idea.\nexport namespace Decide {\n  export const deposit = (amount: number) => (state: State): Event[] => {\n    return [{ type: 'Deposited', data: { amount } }]\n  }\n  export const withdraw = (amount: number) => (state: State): Event[] => {\n    if (state > amount) return [{ type: 'Withdrawn', data: { amount } }]\n    throw new Error('Insufficient funds')\n  }\n}\n\nexport class Service {\n  constructor(private readonly resolve: (accountId: string) => Decider<Event, State>) {\n  }\n\n  deposit(accountId: string, amount: number) {\n    const decider = this.resolve(accountId)\n    return decider.transact(Decide.deposit(amount))\n  }\n\n  withdraw(accountId: string, amount: number) {\n    const decider = this.resolve(accountId)\n    return decider.transact(Decide.withdraw(amount))\n  }\n\n  readBalance(accountId: string) {\n    const decider = this.resolve(accountId)\n    return decider.query(state => state)\n  }\n\n  static createMessageDb(context: Mdb.MessageDbContext, caching: Mdb.CachingStrategy) {\n    const category = Mdb.MessageDbCategory.create(context, Category, codec, fold, initial, caching)\n    const resolve = (stayId: GuestStayId) => Decider.resolve(category, streamId(stayId), null)\n    return new Service(resolve)\n  }\n\n  static createMem(store: Mem.VolatileStore<Record<string, any>>) {\n    const category = Mem.MemoryStoreCategory.create(store, Category, codec, fold, initial)\n    const resolve = (stayId: GuestStayId) => Decider.resolve(category, streamId(stayId), null)\n    return new Service(resolve)\n  }\n}\n")))}l.isMDXComponent=!0}}]);