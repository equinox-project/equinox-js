"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[245],{7522:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(9901);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9637:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7364),o=(n(9901),n(7522));const a={sidebar_position:2},s="Stream",i={unversionedId:"core-concepts/stream",id:"core-concepts/stream",title:"Stream",description:"Streams are the fundamental unit of organization of event sourced systems, providing a sequence of events that represent",source:"@site/docs/core-concepts/stream.md",sourceDirName:"core-concepts",slug:"/core-concepts/stream",permalink:"/equinox-js/docs/core-concepts/stream",draft:!1,editUrl:"https://github.com/nordfjord/equinox-js/tree/main/apps/docs/docs/core-concepts/stream.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Category",permalink:"/equinox-js/docs/core-concepts/category"},next:{title:"Decider",permalink:"/equinox-js/docs/core-concepts/decider"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stream"},"Stream"),(0,o.kt)("p",null,"Streams are the fundamental unit of organization of event sourced systems, providing a sequence of events that represent\nthe state changes of an entity over time. Each stream represents a single entity, aggregate, process, or workflow."),(0,o.kt)("p",null,"In Equinox streams are consistency boundaries, there is no API that allows you to write messages across streams in a\ntransactional (ACID) manner. When you want to make a change to the state of your system that is exclusively done through\nappending events to a stream. In general this is done in a few steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Load all events in the stream taking note of the position value of the last event in the stream"),(0,o.kt)("li",{parentName:"ol"},"Fold these events into a view of the current state"),(0,o.kt)("li",{parentName:"ol"},"Based on the current state, make a decision about which events to append in response to the user's intent."),(0,o.kt)("li",{parentName:"ol"},"Write those events to the store IF AND ONLY IF the position noted in step 1 is still the last position.")),(0,o.kt)("p",null,"Using the version of the stream to control whether to write or not is known as optimistic concurrency control because it\ndoes not require taking out a lock on the stream. Equinox abstracts this logic away from you and provides additional\nfunctionality like automatic retries in case of a conflict, caching of aggregate state, and different access strategies\nfor loading your streams."))}m.isMDXComponent=!0}}]);